# ==============================================================================
# Test configuration that adds a GENERATE_PROPOSALS layer at the end of a DNN
# with a confidence threshold of 45 for layer parameter testing
# ==============================================================================

# Name used as prefix on all generated file\variable names
DNN_NAME test_generate_proposals_2

# For Tensorflow: relative path and filename of the input .tflite file
# For PyTorch: "pytorch", which indicates that the model is read directly from
#  a pre-loaded data structure
DNN_MODEL ..\..\models\sony_detection_es1_rom.tflite

# -------------------------------
# Base configurations
# -------------------------------
INC_CONFIG ..\base\sensor\imx681.inc

# -------------------------------
# Output mode & paths
# -------------------------------

# Output mode that selects generated file types:
#   rom - output auto-generated C source (.c\.h) and dnn memory image (.bin)
#         (intended for model that is compiled into firmware as ROM model)
#   i2c - output i2c sequence to load this model on a real sensor via i2c (.bin)
#         Also for simulation.
OUTPUT_MODE i2c

# Directory to store all generated files in
OUTPUT_DIRECTORY ..\..\output

# ---------------------------
# Post-Processing
# ---------------------------

# Post-Processing
# Opertions are:
#   ANCHOR_BOXES <data filename>
#   THRESHOLD    <data_mode> <compare_mode> <report mode> <report fields...>
#      data_mode: RAW, DEQUANT
#      compare_mode: GT, LT
#      report_mode: ALL, FILT_BY_CNT, FILT_BY_VAL
#      report_fields: ROW, BEST_COL, BEST_VAL, CNT, DATA, COMP
# This is a test mode that adds a GENERATE_PROPOSALS layer:
#   GENERATE_PROPOSALS <data filename> <input rows> <iou thresh> <width thresh> 
#                      <height thresh> <conf thresh>
POSTPROCESSING GENERATE_PROPOSALS ..\..\data\sony_detection_anchor_boxes.txt 50 50 15 15 45

# Mapping of DNN outputs to post-processing inputs
#  INPUT 0: anchor boxes
#    All of output buffer 0 (1242x4)
POSTPROC_DNN_DATA_OUT_IDX 0
POSTPROC_DNN_DATA_START_ROW 0
POSTPROC_DNN_DATA_START_COL 0
POSTPROC_DNN_DATA_NUM_ROWS 1242
POSTPROC_DNN_DATA_NUM_COLS 4

#  INPUT 1: confidences 
#    All of output buffer 1 (1242x4)
POSTPROC_COMPARE_VALS_OUT_IDX 1
POSTPROC_COMPARE_VALS_START_ROW 0
POSTPROC_COMPARE_VALS_START_COL 0
POSTPROC_COMPARE_VALS_NUM_ROWS 1242
POSTPROC_COMPARE_VALS_NUM_COLS 4

# Mapping of columns in the COMPARE_VALS input to object types
#   Each column represents a different object type in this case
POSTPROC_COL_TO_OBJECT_TYPE [0, 1, 2, 3]

# Postprocessing threshold values that need to be written to registers.
# For anchor boxes: [IOU_THRESH, HEIGHT_THRESH, WIDTH_THRESH, 
#                    CONF_THRESH0, CONF_THRESH1, CONF_THRESH2, 
#                    CONF_THRESH3, CONF_THRESH4, CONF_THRESH5]
# For threshold: [COMPARE_THRESH, CNT_THRESH]
POSTPROC_THRESHOLD_VALS [50, 15, 15, 45, 45, 45, 45, 45, 45]

# ---------------------------
# Multi-Layer Convolution Optimizations
# ---------------------------

# Maximum size, in bytes, of a convolution's output buffer before the compiler
# attempts to convert it to a multi-layer convolution (0 = Disabled)
ML_CONV_MAX_OUT_SIZE 4096

# Number of partitions an image is split into when a multi-layer convolution is
# performed. This should be a square number (e.g. 4, 9, 16) (0 = Disabled)
ML_CONV_NUM_PARTITIONS 4

# ROI Pool Mode:
#  FW_ONLY - firmware-only implementation (low speed, high accuracy)
#  HW_ASSIST - hardware-assisted implementation (high speed, low accuracy, experimental)
ROI_POOL_MODE FW_ONLY

# ------------------------
# Other configuration parameters
#-------------------------
